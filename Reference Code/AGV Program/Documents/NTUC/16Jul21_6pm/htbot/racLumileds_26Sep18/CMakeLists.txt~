cmake_minimum_required(VERSION 2.8.3)
project(htbot)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  actionlib
  cv_bridge
  image_transport
  move_base_msgs
  roscpp
  sensor_msgs
  std_msgs
  std_srvs
  tf
  message_generation
)
find_package(PkgConfig)
pkg_check_modules(gsl REQUIRED gsl)
pkg_check_modules(csm REQUIRED csm)
find_package( OpenCV REQUIRED )


## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  Command.msg
	status.msg
	move.msg
	move_status.msg
	clear.msg
	sound.msg
	queue.msg
	go.msg
	debug.msg
	scanCmd.msg
	odom.msg
)

## Generate services in the 'srv' folder
add_service_files(
   FILES
   srvcmd.srv
	 sendgoal.srv
	 Empty.srv
	 scanMcmd.srv
	 mqueue.srv
)

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   geometry_msgs
   std_msgs
 )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
#  LIBRARIES htbot
  CATKIN_DEPENDS cv_bridge image_transport roscpp sensor_msgs std_msgs move_base_msgs actionlib tf std_srvs message_runtime
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
	${csm_INCLUDE_DIRS}
  /home/racnys/catkin_ws/src/htbot/include
)
link_directories(${csm_LIBRARY_DIRS})

## Declare a cpp library
# add_library(htbot
#   src/${PROJECT_NAME}/htbot.cpp
# )

## Declare a cpp executable
# add_executable(htbot_node src/htbot_node.cpp)
 	add_executable(htbot src/bot2wheel_driver.cpp src/EPOS.cpp src/bot_node.cpp)
 	target_link_libraries ( htbot ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

	add_executable(bar src/barcode_node.cpp)
  target_link_libraries ( bar ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

	add_executable(sgoal src/sendgoal_node.cpp)
 	target_link_libraries ( sgoal ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

 	add_executable(jnode src/joy_node.cpp)
 	target_link_libraries ( jnode ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

 	add_executable(webNode src/web_node.cpp)
 	target_link_libraries ( webNode ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

 	add_executable(movNode src/move_node.cpp)
 	target_link_libraries ( movNode ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

 	add_executable(clearNode src/clearMap_node.cpp)
	target_link_libraries ( clearNode ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

	add_executable(talkNode src/talk_node.cpp)
 	target_link_libraries ( talkNode ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

	add_executable(debugNode src/debug_node.cpp)
 	target_link_libraries ( debugNode ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )  

	add_executable(STNode src/start_node.cpp)
 	target_link_libraries ( STNode ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

	add_executable(arNode src/arduino_node.cpp)
 	target_link_libraries ( arNode ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )
	
	add_executable(laserNode src/laser_node.cpp)
 	target_link_libraries ( laserNode ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

	add_executable(slaser src/side_laser.cpp)
 	target_link_libraries ( slaser ${OpenCV_LIBRARIES} ${catkin_LIBRARIES} )

	add_executable(match src/match_node.cpp)
	target_link_libraries ( match ${catkin_LIBRARIES} ${gsl_LIBRARIES} ${csm_LIBRARIES} )
		
	add_executable(podom src/odom_node.cpp)
	target_link_libraries ( podom ${catkin_LIBRARIES} ${gsl_LIBRARIES} ${csm_LIBRARIES} )

  add_executable(qnode src/queue_node.cpp)
	target_link_libraries ( qnode ${catkin_LIBRARIES} ${gsl_LIBRARIES} ${csm_LIBRARIES} )

  add_executable(tt src/test.cpp)
	target_link_libraries ( tt ${catkin_LIBRARIES} ${gsl_LIBRARIES} ${csm_LIBRARIES} )


  add_executable(rfid2 src/rfid2.cpp)
	target_link_libraries ( rfid2 ${catkin_LIBRARIES} ${gsl_LIBRARIES} ${csm_LIBRARIES} )

	add_executable(rfid src/rfid.cpp)
	target_link_libraries ( rfid ${catkin_LIBRARIES} ${gsl_LIBRARIES} ${csm_LIBRARIES} )
		
## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(htbot_node htbot_generate_messages_cpp)

## Specify libraries to link a library or executable target against
# target_link_libraries(htbot_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS htbot htbot_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
 install(DIRECTORY include/${PROJECT_NAME}/
   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
 )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_htbot.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
