#include "htbot/EPOS2.h"
#include "htbot/odom.h"
#include "htbot/sound.h"

#ifndef BOT_DRIVER
#define BOT_DRIVER

class Bot2Wheel
{
	EPOS leftMotor, rightMotor;
	int leftmotor_fd,rightmotor_fd;
	int prev_Lpos, prev_Rpos;
	double mm_per_count;
public:
	Bot2Wheel ();
	~Bot2Wheel ();

	std::string LEFT_MOTOR;
	std::string RIGHT_MOTOR;
	int pbaudL,pbaudR,ebaudL,ebaudR,cbaudrateL,cbaudrateR;  // port baudrate and epos baudrate. cbaudrate=1 to change rate
	int REFLECT; //  if robot moves anticlockwise when both motors are given +ve vel command
	int AXLE_LEN; // in mm
	int WHEEL_DIA; // in mm
	int GEAR_RATIO;
	int STEPS_PER_REV; // in quad-counts
	double wheel_circum_correction;
	double wheel_base_correction;
	double odom_angular_scale_correction;
	ros::NodeHandle nn;
	ros::Publisher odom_pub,play_pub;

	int CurrentRegulatorPGain;
	int CurrentRegulatorIGain;
	int VelocityPGain;
	int VelocityIGain;
	int PositionPGain;
	int PositionIGain;
	int PositionDGain;

	int ProfileAcceleration;
	int ProfileDeceleration;
	int ProfileVelocity;
	int MaxProfileVelocity;
	int MaxProfileVelocityMD;
	int MaxFollowError;
	int PositionWindow;
	int PositionWindowTime;

	int MotorMaxContinuousCurrent;
	int ThermalTimeConstantWinding;
	
	bool quickstop;

	void start();
	bool reset();
	void shutDown();
	void setParams(EPOS* m);
	bool moveVelocity(double vx,double w); // [m/s,rad/s]
	bool moveDistance(double x); // [m]
	bool moveAngle(double theta); // [degrees]
	bool getDisplacement(double* distance, double* angle); // [m, rad]
	//void changebaudrate();
	void setVelMode();
	void setPosMode();
	void motorVelMode(EPOS* motor);
	bool checkMoveComplete(void);
	bool stopRobot(void);
	void setSlowMove(void);
	void setFastMove(void);
	void publish_odom();
	void publish_sound(int id);

}; //class Bot2Wheel

#endif
