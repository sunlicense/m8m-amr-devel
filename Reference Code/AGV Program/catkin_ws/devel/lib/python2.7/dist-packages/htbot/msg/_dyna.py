# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from htbot/dyna.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class dyna(genpy.Message):
  _md5sum = "aeca87cb1dcfc788fa047b80da0c718b"
  _type = "htbot/dyna"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 paramid
int32 intValue
float64 doubleValue
string strValue
bool boolValue
int8 ftprintno
float64[] footprintlist
"""
  __slots__ = ['paramid','intValue','doubleValue','strValue','boolValue','ftprintno','footprintlist']
  _slot_types = ['int8','int32','float64','string','bool','int8','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       paramid,intValue,doubleValue,strValue,boolValue,ftprintno,footprintlist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(dyna, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.paramid is None:
        self.paramid = 0
      if self.intValue is None:
        self.intValue = 0
      if self.doubleValue is None:
        self.doubleValue = 0.
      if self.strValue is None:
        self.strValue = ''
      if self.boolValue is None:
        self.boolValue = False
      if self.ftprintno is None:
        self.ftprintno = 0
      if self.footprintlist is None:
        self.footprintlist = []
    else:
      self.paramid = 0
      self.intValue = 0
      self.doubleValue = 0.
      self.strValue = ''
      self.boolValue = False
      self.ftprintno = 0
      self.footprintlist = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_bid().pack(_x.paramid, _x.intValue, _x.doubleValue))
      _x = self.strValue
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bb().pack(_x.boolValue, _x.ftprintno))
      length = len(self.footprintlist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.footprintlist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.paramid, _x.intValue, _x.doubleValue,) = _get_struct_bid().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strValue = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.strValue = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.boolValue, _x.ftprintno,) = _get_struct_Bb().unpack(str[start:end])
      self.boolValue = bool(self.boolValue)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.footprintlist = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_bid().pack(_x.paramid, _x.intValue, _x.doubleValue))
      _x = self.strValue
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bb().pack(_x.boolValue, _x.ftprintno))
      length = len(self.footprintlist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.footprintlist.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.paramid, _x.intValue, _x.doubleValue,) = _get_struct_bid().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strValue = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.strValue = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.boolValue, _x.ftprintno,) = _get_struct_Bb().unpack(str[start:end])
      self.boolValue = bool(self.boolValue)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.footprintlist = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bb = None
def _get_struct_Bb():
    global _struct_Bb
    if _struct_Bb is None:
        _struct_Bb = struct.Struct("<Bb")
    return _struct_Bb
_struct_bid = None
def _get_struct_bid():
    global _struct_bid
    if _struct_bid is None:
        _struct_bid = struct.Struct("<bid")
    return _struct_bid
