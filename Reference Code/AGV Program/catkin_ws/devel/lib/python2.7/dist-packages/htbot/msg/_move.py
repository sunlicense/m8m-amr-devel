# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from htbot/move.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class move(genpy.Message):
  _md5sum = "05f4bf5bce5c30ffe01fb09c18cbbd86"
  _type = "htbot/move"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 x
float32 y
float32 z
float32 rx
float32 ry
float32 rz
float32 rw
float32 pd
float32 pa
float32 gap
int8 slp
int8 elp
int8 opt
"""
  __slots__ = ['x','y','z','rx','ry','rz','rw','pd','pa','gap','slp','elp','opt']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,rx,ry,rz,rw,pd,pa,gap,slp,elp,opt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(move, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.rx is None:
        self.rx = 0.
      if self.ry is None:
        self.ry = 0.
      if self.rz is None:
        self.rz = 0.
      if self.rw is None:
        self.rw = 0.
      if self.pd is None:
        self.pd = 0.
      if self.pa is None:
        self.pa = 0.
      if self.gap is None:
        self.gap = 0.
      if self.slp is None:
        self.slp = 0
      if self.elp is None:
        self.elp = 0
      if self.opt is None:
        self.opt = 0
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.rx = 0.
      self.ry = 0.
      self.rz = 0.
      self.rw = 0.
      self.pd = 0.
      self.pa = 0.
      self.gap = 0.
      self.slp = 0
      self.elp = 0
      self.opt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10f3b().pack(_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.rw, _x.pd, _x.pa, _x.gap, _x.slp, _x.elp, _x.opt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.rw, _x.pd, _x.pa, _x.gap, _x.slp, _x.elp, _x.opt,) = _get_struct_10f3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10f3b().pack(_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.rw, _x.pd, _x.pa, _x.gap, _x.slp, _x.elp, _x.opt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.rw, _x.pd, _x.pa, _x.gap, _x.slp, _x.elp, _x.opt,) = _get_struct_10f3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10f3b = None
def _get_struct_10f3b():
    global _struct_10f3b
    if _struct_10f3b is None:
        _struct_10f3b = struct.Struct("<10f3b")
    return _struct_10f3b
