// Generated by gencpp from file htbot/task.msg
// DO NOT EDIT!


#ifndef HTBOT_MESSAGE_TASK_H
#define HTBOT_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace htbot
{
template <class ContainerAllocator>
struct task_
{
  typedef task_<ContainerAllocator> Type;

  task_()
    : cmd(0)
    , time()
    , type(0)
    , fromLP(0)
    , toLP(0)
    , alloc(0)  {
    }
  task_(const ContainerAllocator& _alloc)
    : cmd(0)
    , time()
    , type(0)
    , fromLP(0)
    , toLP(0)
    , alloc(0)  {
  (void)_alloc;
    }



   typedef int8_t _cmd_type;
  _cmd_type cmd;

   typedef ros::Time _time_type;
  _time_type time;

   typedef int8_t _type_type;
  _type_type type;

   typedef int8_t _fromLP_type;
  _fromLP_type fromLP;

   typedef int8_t _toLP_type;
  _toLP_type toLP;

   typedef int8_t _alloc_type;
  _alloc_type alloc;





  typedef boost::shared_ptr< ::htbot::task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::htbot::task_<ContainerAllocator> const> ConstPtr;

}; // struct task_

typedef ::htbot::task_<std::allocator<void> > task;

typedef boost::shared_ptr< ::htbot::task > taskPtr;
typedef boost::shared_ptr< ::htbot::task const> taskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::htbot::task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::htbot::task_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace htbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'htbot': ['/home/rac/catkin_ws/src/htbot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::htbot::task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::htbot::task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::htbot::task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::htbot::task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::htbot::task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::htbot::task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::htbot::task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9335104b860e9530a386a51f33ebb59";
  }

  static const char* value(const ::htbot::task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9335104b860e953ULL;
  static const uint64_t static_value2 = 0x0a386a51f33ebb59ULL;
};

template<class ContainerAllocator>
struct DataType< ::htbot::task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "htbot/task";
  }

  static const char* value(const ::htbot::task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::htbot::task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 cmd\n\
time time\n\
int8 type\n\
int8 fromLP\n\
int8 toLP\n\
int8 alloc\n\
";
  }

  static const char* value(const ::htbot::task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::htbot::task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.time);
      stream.next(m.type);
      stream.next(m.fromLP);
      stream.next(m.toLP);
      stream.next(m.alloc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::htbot::task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::htbot::task_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "fromLP: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fromLP);
    s << indent << "toLP: ";
    Printer<int8_t>::stream(s, indent + "  ", v.toLP);
    s << indent << "alloc: ";
    Printer<int8_t>::stream(s, indent + "  ", v.alloc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HTBOT_MESSAGE_TASK_H
