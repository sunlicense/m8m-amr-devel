// Generated by gencpp from file ntuc_fleet/jobs.msg
// DO NOT EDIT!


#ifndef NTUC_FLEET_MESSAGE_JOBS_H
#define NTUC_FLEET_MESSAGE_JOBS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ntuc_fleet/task.h>

namespace ntuc_fleet
{
template <class ContainerAllocator>
struct jobs_
{
  typedef jobs_<ContainerAllocator> Type;

  jobs_()
    : cmd(0)
    , time()
    , tasks()  {
    }
  jobs_(const ContainerAllocator& _alloc)
    : cmd(0)
    , time()
    , tasks(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _cmd_type;
  _cmd_type cmd;

   typedef ros::Time _time_type;
  _time_type time;

   typedef std::vector< ::ntuc_fleet::task_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ntuc_fleet::task_<ContainerAllocator> >::other >  _tasks_type;
  _tasks_type tasks;





  typedef boost::shared_ptr< ::ntuc_fleet::jobs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ntuc_fleet::jobs_<ContainerAllocator> const> ConstPtr;

}; // struct jobs_

typedef ::ntuc_fleet::jobs_<std::allocator<void> > jobs;

typedef boost::shared_ptr< ::ntuc_fleet::jobs > jobsPtr;
typedef boost::shared_ptr< ::ntuc_fleet::jobs const> jobsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ntuc_fleet::jobs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ntuc_fleet::jobs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ntuc_fleet

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ntuc_fleet': ['/home/rac/catkin_ws/src/ntuc_fleet/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ntuc_fleet::jobs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ntuc_fleet::jobs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ntuc_fleet::jobs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ntuc_fleet::jobs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ntuc_fleet::jobs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ntuc_fleet::jobs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ntuc_fleet::jobs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7b1ebb1ce6d0c3bb74e63fcb9b9e5cb";
  }

  static const char* value(const ::ntuc_fleet::jobs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7b1ebb1ce6d0c3bULL;
  static const uint64_t static_value2 = 0xb74e63fcb9b9e5cbULL;
};

template<class ContainerAllocator>
struct DataType< ::ntuc_fleet::jobs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ntuc_fleet/jobs";
  }

  static const char* value(const ::ntuc_fleet::jobs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ntuc_fleet::jobs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "##################################################\n\
##### Message type: jobs.msg\n\
##### Use in Topics: /rq_jobs, /rv_jobs\n\
##################################################\n\
int8 cmd				# command code	 \n\
time time			# time queue is updated\n\
task[] tasks		# list of task.msg (of type task.msg)\n\
\n\
##################################################\n\
## cmd		command code\n\
## time		time in time.secs and and time.nsecs \n\
## task[]	list of pending tasks (of type task.msg)\n\
##################################################\n\
\n\
================================================================================\n\
MSG: ntuc_fleet/task\n\
##################################################\n\
##### Message type: task.msg\n\
##### Use in Topics: /fr_station, /fr_fleet, /fr_agv\n\
##################################################\n\
int8 cmd		# command code \n\
time time		# time task is queued\n\
int8 type		# different trolley type\n\
int8 fromLP		# starting LP\n\
int8 toLP		# ending LP\n\
int8 alloc		# 0:not allocated, 1:allocated to AGV1, 2:allocated to AGV2\n\
\n\
##################################################\n\
## cmd		1:new task, 2:assigned task, 3:cancel task\n\
## time		time.secs and time.nsecs (ROS time)\n\
## type		1:Bian Marie, 2:Food Warmer, 3:Linen\n\
## fromLP	70:L1LRm3-9, 73:L1LRm3, 74:L1LRm4, 75:L1LRm5, 76:L1LRm6, 77:L1LRm7, 78:L1LRm8, 79:L1LRm9,\n\
##				3:L3Ward3, 4:L4Ward4, 5:L5Ward5, 6:L6Ward6, 7:L7Ward7, 8:L8Ward8, 9:L9Ward9, \n\
##				10:L10StaffDorm, 11:L11Ktchen,\n\
##				51:L1MainStore, 52:L1NonHalalPrepRoom\n\
## toLP		73:L1LRm3, 74:L1LRm4, 75:L1LRm5, 76:L1LRm6, 77:L1LRm7, 78:L1LRm8, 79:L1LRm9,\n\
##				3:L3Ward3, 4:L4Ward4, 5:L5Ward5, 6:L6Ward6, 7:L7Ward7, 8:L8Ward8, 9:L9Ward,\n\
##				10: L10StaffDorm, 11:L11Ktchen,\n\
##				51:L1MainStore, 52:L1NonHalalPrepRoom\n\
## alloc	0:not allocated, 1:allocated to AGV1, 2:allocated to AGV2\n\
##################################################	\n\
## LP Range:: 	2-49: Lift Area, 50-69: Lobby Area, 70-100: Laundry Area \n\
##################################################	\n\
";
  }

  static const char* value(const ::ntuc_fleet::jobs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ntuc_fleet::jobs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.time);
      stream.next(m.tasks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jobs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ntuc_fleet::jobs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ntuc_fleet::jobs_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "tasks[]" << std::endl;
    for (size_t i = 0; i < v.tasks.size(); ++i)
    {
      s << indent << "  tasks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ntuc_fleet::task_<ContainerAllocator> >::stream(s, indent + "    ", v.tasks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NTUC_FLEET_MESSAGE_JOBS_H
