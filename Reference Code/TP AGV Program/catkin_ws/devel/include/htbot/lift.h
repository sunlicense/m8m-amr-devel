// Generated by gencpp from file htbot/lift.msg
// DO NOT EDIT!


#ifndef HTBOT_MESSAGE_LIFT_H
#define HTBOT_MESSAGE_LIFT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace htbot
{
template <class ContainerAllocator>
struct lift_
{
  typedef lift_<ContainerAllocator> Type;

  lift_()
    : cmd(0)
    , cfloor(0)
    , dfloor(0)
    , inuse(0)
    , dooropen(0)
    , doorclose(0)
    , goingup(0)
    , goingdown(0)
    , stationary(0)
    , serviceavail(0)
    , epower(0)
    , fireservice(0)
    , beacon(0)  {
    }
  lift_(const ContainerAllocator& _alloc)
    : cmd(0)
    , cfloor(0)
    , dfloor(0)
    , inuse(0)
    , dooropen(0)
    , doorclose(0)
    , goingup(0)
    , goingdown(0)
    , stationary(0)
    , serviceavail(0)
    , epower(0)
    , fireservice(0)
    , beacon(0)  {
  (void)_alloc;
    }



   typedef int8_t _cmd_type;
  _cmd_type cmd;

   typedef int8_t _cfloor_type;
  _cfloor_type cfloor;

   typedef int8_t _dfloor_type;
  _dfloor_type dfloor;

   typedef int8_t _inuse_type;
  _inuse_type inuse;

   typedef int8_t _dooropen_type;
  _dooropen_type dooropen;

   typedef int8_t _doorclose_type;
  _doorclose_type doorclose;

   typedef int8_t _goingup_type;
  _goingup_type goingup;

   typedef int8_t _goingdown_type;
  _goingdown_type goingdown;

   typedef int8_t _stationary_type;
  _stationary_type stationary;

   typedef int8_t _serviceavail_type;
  _serviceavail_type serviceavail;

   typedef int8_t _epower_type;
  _epower_type epower;

   typedef int8_t _fireservice_type;
  _fireservice_type fireservice;

   typedef int8_t _beacon_type;
  _beacon_type beacon;





  typedef boost::shared_ptr< ::htbot::lift_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::htbot::lift_<ContainerAllocator> const> ConstPtr;

}; // struct lift_

typedef ::htbot::lift_<std::allocator<void> > lift;

typedef boost::shared_ptr< ::htbot::lift > liftPtr;
typedef boost::shared_ptr< ::htbot::lift const> liftConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::htbot::lift_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::htbot::lift_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace htbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'htbot': ['/home/rac/catkin_ws/src/htbot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::htbot::lift_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::htbot::lift_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::htbot::lift_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::htbot::lift_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::htbot::lift_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::htbot::lift_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::htbot::lift_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5880338d440c98c58ce479e42b36bed";
  }

  static const char* value(const ::htbot::lift_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5880338d440c98cULL;
  static const uint64_t static_value2 = 0x58ce479e42b36bedULL;
};

template<class ContainerAllocator>
struct DataType< ::htbot::lift_<ContainerAllocator> >
{
  static const char* value()
  {
    return "htbot/lift";
  }

  static const char* value(const ::htbot::lift_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::htbot::lift_<ContainerAllocator> >
{
  static const char* value()
  {
    return "##################################################\n\
##### Message type: lift.msg\n\
##### Use in Topics: /to_lift, /fr_lift\n\
##################################################\n\
int8 cmd			# command code			[0-102]\n\
int8 cfloor			# start of trip [1-11] or current car level [1-11]\n\
int8 dfloor			# end level of trip	[1-11]\n\
int8 inuse			# request for in_use activation [0/1] or in_use status [0/1]\n\
int8 dooropen		# door open status 	[0/1]\n\
int8 doorclose		# door close status 	[0/1]\n\
int8 goingup		# going up status 	[0/1]\n\
int8 goingdown		# going down status 	[0/1]\n\
int8 stationary		# stationary status 	[0/1]\n\
int8 serviceavail	# service available status	[0/1]\n\
int8 epower			# emergency power status 	[0/1]\n\
int8 fireservice	# fire service status 		[0/1]\n\
int8 beacon			# beacon light alarm 		[0/1], 1 to trigger, 0 to turn off\n\
\n\
##################################################\n\
##### cmd value usage:\n\
##### 0:carCallStartLevel, 1:enteredLift, 2:carCallEndLevel, 3:exitedLift\n\
##### 8:beacon, 9:inUse, 10:okay2Enter, 11:okay2Exit\n\
##### 20:inUse, 21:doorOpen, 22:doorClose, 23:goingUp, 24:goingDown, 25:stationary \n\
##### 40:carLevel, 100:serviceAvailable, 101: emergencyPower, 102:fireServiceAlarm\n\
##################################################\n\
";
  }

  static const char* value(const ::htbot::lift_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::htbot::lift_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.cfloor);
      stream.next(m.dfloor);
      stream.next(m.inuse);
      stream.next(m.dooropen);
      stream.next(m.doorclose);
      stream.next(m.goingup);
      stream.next(m.goingdown);
      stream.next(m.stationary);
      stream.next(m.serviceavail);
      stream.next(m.epower);
      stream.next(m.fireservice);
      stream.next(m.beacon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lift_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::htbot::lift_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::htbot::lift_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "cfloor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cfloor);
    s << indent << "dfloor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dfloor);
    s << indent << "inuse: ";
    Printer<int8_t>::stream(s, indent + "  ", v.inuse);
    s << indent << "dooropen: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dooropen);
    s << indent << "doorclose: ";
    Printer<int8_t>::stream(s, indent + "  ", v.doorclose);
    s << indent << "goingup: ";
    Printer<int8_t>::stream(s, indent + "  ", v.goingup);
    s << indent << "goingdown: ";
    Printer<int8_t>::stream(s, indent + "  ", v.goingdown);
    s << indent << "stationary: ";
    Printer<int8_t>::stream(s, indent + "  ", v.stationary);
    s << indent << "serviceavail: ";
    Printer<int8_t>::stream(s, indent + "  ", v.serviceavail);
    s << indent << "epower: ";
    Printer<int8_t>::stream(s, indent + "  ", v.epower);
    s << indent << "fireservice: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fireservice);
    s << indent << "beacon: ";
    Printer<int8_t>::stream(s, indent + "  ", v.beacon);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HTBOT_MESSAGE_LIFT_H
