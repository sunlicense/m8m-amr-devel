// Generated by gencpp from file htbot/srvcmdRequest.msg
// DO NOT EDIT!


#ifndef HTBOT_MESSAGE_SRVCMDREQUEST_H
#define HTBOT_MESSAGE_SRVCMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace htbot
{
template <class ContainerAllocator>
struct srvcmdRequest_
{
  typedef srvcmdRequest_<ContainerAllocator> Type;

  srvcmdRequest_()
    : cmd(0)
    , fromLP()
    , toLP()
    , cGP(0)
    , cLP(0)
    , fLP(0)
    , tLP(0)  {
    }
  srvcmdRequest_(const ContainerAllocator& _alloc)
    : cmd(0)
    , fromLP(_alloc)
    , toLP(_alloc)
    , cGP(0)
    , cLP(0)
    , fLP(0)
    , tLP(0)  {
  (void)_alloc;
    }



   typedef int8_t _cmd_type;
  _cmd_type cmd;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fromLP_type;
  _fromLP_type fromLP;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _toLP_type;
  _toLP_type toLP;

   typedef int8_t _cGP_type;
  _cGP_type cGP;

   typedef int8_t _cLP_type;
  _cLP_type cLP;

   typedef int8_t _fLP_type;
  _fLP_type fLP;

   typedef int8_t _tLP_type;
  _tLP_type tLP;





  typedef boost::shared_ptr< ::htbot::srvcmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::htbot::srvcmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srvcmdRequest_

typedef ::htbot::srvcmdRequest_<std::allocator<void> > srvcmdRequest;

typedef boost::shared_ptr< ::htbot::srvcmdRequest > srvcmdRequestPtr;
typedef boost::shared_ptr< ::htbot::srvcmdRequest const> srvcmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::htbot::srvcmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::htbot::srvcmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace htbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'htbot': ['/home/rac/catkin_ws/src/htbot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::htbot::srvcmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::htbot::srvcmdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::htbot::srvcmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::htbot::srvcmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::htbot::srvcmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::htbot::srvcmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::htbot::srvcmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09bc6b52683ec407d73185b7e17c7067";
  }

  static const char* value(const ::htbot::srvcmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09bc6b52683ec407ULL;
  static const uint64_t static_value2 = 0xd73185b7e17c7067ULL;
};

template<class ContainerAllocator>
struct DataType< ::htbot::srvcmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "htbot/srvcmdRequest";
  }

  static const char* value(const ::htbot::srvcmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::htbot::srvcmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 cmd\n\
string fromLP\n\
string toLP\n\
int8 cGP\n\
int8 cLP\n\
int8 fLP\n\
int8 tLP\n\
";
  }

  static const char* value(const ::htbot::srvcmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::htbot::srvcmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.fromLP);
      stream.next(m.toLP);
      stream.next(m.cGP);
      stream.next(m.cLP);
      stream.next(m.fLP);
      stream.next(m.tLP);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srvcmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::htbot::srvcmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::htbot::srvcmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "fromLP: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fromLP);
    s << indent << "toLP: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.toLP);
    s << indent << "cGP: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cGP);
    s << indent << "cLP: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cLP);
    s << indent << "fLP: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fLP);
    s << indent << "tLP: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tLP);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HTBOT_MESSAGE_SRVCMDREQUEST_H
