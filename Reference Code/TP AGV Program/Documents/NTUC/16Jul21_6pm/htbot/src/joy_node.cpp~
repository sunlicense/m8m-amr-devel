#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <sensor_msgs/Joy.h>
#include "boost/thread/mutex.hpp"
#include "boost/thread/thread.hpp"
#include "ros/console.h"

class HTBOTJoy
{
public:
  HTBOTJoy();	

private:
  ros::NodeHandle nh;

  int linear, angular, linear_inc, linear_dec,angular_inc,angular_dec;
  double l_scale, a_scale;
  ros::Publisher vel_pub;
  ros::Subscriber joy_sub;
	void joyCallback(const sensor_msgs::Joy::ConstPtr& joy) ;

};

HTBOTJoy::HTBOTJoy():
  linear(0),
  angular(1),
	linear_inc(0),
  angular_inc(1),
	linear_dec(0),
  angular_dec(1),
  l_scale(0.3),
  a_scale(0.3)  
{
  nh.param("/joystick/axis_linear", linear, linear);
  nh.param("/joystick/axis_angular", angular, angular);
  nh.param("/joystick/scale_angular", a_scale, a_scale);
  nh.param("/joystick/scale_linear", l_scale, l_scale);
	nh.param("/joystick/linear_inc", linear_inc, linear_inc);
	nh.param("/joystick/angular_inc", angular_inc, angular_inc);
	nh.param("/joystick/linear_dec", linear_dec, linear_dec);
	nh.param("/joystick/angular_dec", angular_dec, angular_dec);

  vel_pub = nh.advertise<geometry_msgs::Twist>("cmd_vel", 1);
  joy_sub = nh.subscribe<sensor_msgs::Joy>("joy", 1, &HTBOTJoy::joyCallback, this);
	ROS_INFO("angular scale : %.3f. Linear scale  : %.3f",a_scale,l_scale);
	ROS_INFO("angular  : %d. Linear : %d",angular,linear);

}

void HTBOTJoy::joyCallback(const sensor_msgs::Joy::ConstPtr& joy) 
{ 
	int x;
  geometry_msgs::Twist vel;
	//ROS_INFO("angular : %d",angular);
	//ROS_INFO("linear : %d",linear);
	double vx,vz;
  
	x =  joy->buttons[linear_inc];
	if (x > 0) {
		l_scale = l_scale + 0.01;		
	}
	x =  joy->buttons[linear_dec];
	if (x > 0) {
		l_scale = l_scale - 0.01;
		if (l_scale < 0.0) {
			l_scale = 0.0;
		}
	}
	x =  joy->buttons[angular_inc];
	if (x > 0) {
		a_scale = a_scale + 0.01;		
	}
	x =  joy->buttons[angular_dec];
	if (x > 0) {
		a_scale = a_scale - 0.01;
		if (a_scale < 0.0) {
			a_scale = 0.0;
		}		
	}
	vel.angular.z = a_scale*joy->axes[angular];
  vel.linear.x = l_scale*joy->axes[linear];
	//ROS_INFO("Before : angular : %.3f. Linear : %.3f",joy->axes[angular],joy->axes[linear]);
	vz = vel.angular.z;
	vx = vel.linear.x;
	if (vz < 0.0) {
		vz = -vz;
	}
	if (vx < 0.0) {
		vx = -vx;
	}
	if (vz < vx) {
		vel.angular.z = 0.0;
	} else {
		if (vz > vx) {
			vel.linear.x = 0.0;
		} 
	}
  vel_pub.publish(vel);
	//ROS_INFO("After : angular : %.3f. Linear : %.3f",a_scale,l_scale);
}


int main(int argc, char** argv)
{
  ros::init(argc, argv, "htbot_joy");
  HTBOTJoy htbot_joy;
	
  ros::spin();
}
