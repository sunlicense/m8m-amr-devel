/*
 * This node is to service command request from websocket 
 */
/* 	History
*		Date Modified : 3.12.2014
*		Changes :
*/

#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <signal.h>
#include <stdio.h>
#include <math.h>
#include <sensor_msgs/LaserScan.h>
#include "std_msgs/UInt16.h"
#include "std_msgs/Float32.h"
#include "std_msgs/String.h"

#define MAX_RANGE 30.0
#define MIN_RANGE 0.02  //0.03
#define DWIDTH 0.35  // 0.4m
#define DBOX 2.0
#define DFRONT 0.1
#define DEGPIDX 0.25
#define RADPIDX 0.00436
#define PI 3.14159
#define DM 28.07 // dm = atan(DWIDTH / (DBOX + DFRONT)) * (180.0 / PI);  // degree
#define DMIDX 112  // (int)(dm / DEGPIDX)
#define DG  70 // dg = atan(DWIDTH / DFRONT) * (180.0 / PI);  // degree
#define DGIDX 280 // (int)(dg / DEGPIDX)
#define LASEROFFSET 0.05

using namespace std;

ros::Subscriber laser_sub;
ros::Publisher scan_pub;
//ros::Publisher obs_pub;

int laser_size;
int clearObs,lookforObs,cidx,lidx,ridx,lmidx,rmidx;
double refr,lrange,dm,dg,dt,od, tod,rod,lod;
sensor_msgs::LaserScan scan_msg;
std_msgs::Float32 obs_msg;	
double refrr,refll,rtod,ltod;


// prototype
void laserCallBack(const sensor_msgs::LaserScan::ConstPtr& lscan);

void laserCallBack(const sensor_msgs::LaserScan::ConstPtr& lscan) {	
	ros::NodeHandle nx;	
	//bool clear ;

	//clear = false;
	//nx.getParam("clearObs",clearObs);
	nx.getParam("lookforObs",lookforObs);
	//if (lookforObs == 1) {
	//	ROS_INFO("Look for Obs");
	//}
	laser_size = lscan->ranges.size();
	cidx = (int)(laser_size / 2.0);
	rmidx = cidx - DMIDX;
	lmidx = cidx + DMIDX;
	ridx = cidx - DGIDX;
	lidx = cidx + DGIDX;
	od = 0.0; // obs dist in front of robot
	rod = 0.0;
	lod = 0.0;
	//ROS_INFO("Laser Size : %d.",laser_size);	
	scan_msg.ranges.resize(laser_size);
	//scan_msg.intensities.resize(laser_size);
	scan_msg.header.stamp = lscan->header.stamp;
	scan_msg.header.frame_id = lscan->header.frame_id;
	scan_msg.angle_min = lscan->angle_min;
	scan_msg.angle_max = lscan->angle_max;
	scan_msg.angle_increment = lscan->angle_increment;
	scan_msg.scan_time = lscan->scan_time;
	scan_msg.time_increment = lscan->time_increment;
	//scan_msg.range_min = lscan->range_min;
	scan_msg.range_min = MIN_RANGE;
	scan_msg.range_max = MAX_RANGE;
	//ROS_INFO("ainc : %.6f. stime : %.6f. t_inc : %.6f",lscan->angle_increment,lscan->scan_time,lscan->time_increment);
	for (int i=0;i<laser_size;i++) {
		if(!std::isnan(lscan->ranges[i]) && !std::isinf(lscan->ranges[i])){
			//ROS_INFO("Here P2");
			if (lscan->ranges[i] > MAX_RANGE) {
				scan_msg.ranges[i] = MAX_RANGE - 0.1;
			} else {
				if (lscan->ranges[i] < MIN_RANGE) {
					scan_msg.ranges[i] = MAX_RANGE - 0.1;
				} else {
					scan_msg.ranges[i] = lscan->ranges[i];
				}
			}
		} else {
			scan_msg.ranges[i] = MAX_RANGE - 0.1;
		}
		refr = 0.0;		
		tod = 0.0;
		refrr = 0.0;
		refll = 0.0;
		rtod = 0.0;
		ltod = 0.0;		
		if (lookforObs == 1) {
			// check for obstacles	
			if ((i >= ridx) && (i <= rmidx)) {
				dt = (cidx-i) * RADPIDX;  // rad
				refr = DWIDTH / sin(dt);
				refrr = DWIDTH / sin(dt);
				if ((refrr > 0.0) && (lscan->ranges[i] < refrr)) {  // obs in right side of box
					rtod = lscan->ranges[i] * cos(dt);
					if ((rtod < rod) || (rod == 0.0)) {
						rod = rtod;
					}
				}
			}		
			if ((i > rmidx) && (i <= cidx)) {
				dt = (cidx-i) * RADPIDX;
				refr = (DBOX + DFRONT) / cos(dt);
			}	
			if ((i > cidx) && (i <= lmidx)) {
				dt = (i - cidx) * RADPIDX;
				refr = (DBOX + DFRONT) / cos(dt);
			}
			if ((i >= lmidx) && (i <= lidx)) {
				dt = (i - cidx) * RADPIDX;
				refr = DWIDTH / sin(dt);
				refll = DWIDTH / sin(dt);
				if ((refll > 0.0) && (lscan->ranges[i] < refll)) {  // obs in right side of box
					ltod = lscan->ranges[i] * cos(dt);
					if ((ltod < lod) || (lod == 0.0)) {
						lod = ltod;
					}
				}
			}
			if ((refr > 0.0) && (lscan->ranges[i] < refr)) {  // obs in box
				tod = lscan->ranges[i] * cos(dt);
				if ((tod < od) || (od == 0.0)) {
					od = tod;
				}
			}			
		}		
	}
	if (od > 0.0) {
		od = od - LASEROFFSET;
		nx.setParam("ProfileMoveObsDist",od);	
		nx.setParam("ProfileMoveObsDDist",(rod - lod));	 // if pos => rotate left. neg => rotate right	
		//ROS_INFO("lod : %.2f. rod : %.2f. Dif : %.2f",lod,rod,rod-lod);
	} else {
		nx.setParam("ProfileMoveObsDist",2.1);
	}
	scan_pub.publish(scan_msg);
}


int main(int argc, char **argv)
{
	ros::init(argc, argv, "laser_filter");
  ros::NodeHandle n;
	
	laser_sub= n.subscribe<sensor_msgs::LaserScan>("/scannys",1, laserCallBack);	 // /scan_base - org
	scan_pub = n.advertise<sensor_msgs::LaserScan>("scan", 10);
	//obs_pub = n.advertise<std_msgs::Float32>("frontObs", 10);

  ros::spin();

  return 0;
}



