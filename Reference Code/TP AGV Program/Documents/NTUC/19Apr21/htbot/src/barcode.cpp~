/*
 * This node is to interface to barcode reader and publish  
 * the barcode data.
 * 
 * Date Created : 17.12.2014
 * History :
 * Author : ng yong seng
 */


#include <ros/ros.h>
#include <signal.h>
#include <termios.h>
#include <stdio.h>
#include "boost/thread/mutex.hpp"
#include "boost/thread/thread.hpp"
#include "std_msgs/String.h"

class BarCodeNode
{
public:
	BarCodeNode();
	void keyLoop();
	char cbuf [100];
	
private:
	ros::NodeHandle nh,ph;
	ros::Publisher barcode_pub;
	void publish(int);
};

BarCodeNode::BarCodeNode():
	ph("~")
{
	barcode_pub = nh.advertise<std_msgs::String>("barcode", 1000);
}

int kfd = 0;
struct termios cooked, raw;


int main(int argc, char** argv)
{
	ros::init(argc, argv, "barcode reader");
	BarCodeNode bNode;
	ros::NodeHandle n;

	boost::thread my_thread(boost::bind(&BarCodeNode::keyLoop, &bNode));
	ros::spin();
	my_thread.interrupt() ;
	my_thread.join() ;

	return(0);
}

void BarCodeNode::keyLoop()
{
	char c;
	int k;	

	// get the console in raw mode
	tcgetattr(kfd, &cooked);
	memcpy(&raw, &cooked, sizeof(struct termios));
	raw.c_lflag &=~ (ICANON | ECHO);
	// Setting a new line, then end of file
	raw.c_cc[VEOL] = 1;
	raw.c_cc[VEOF] = 2;
	tcsetattr(kfd, TCSANOW, &raw);
	k = 0;
	while (ros::ok())
	{
		// get the next event from the keyboard
		if(read(kfd, &c, 1) < 0)
		{
			perror("read():");
			exit(-1);
		}
		
		//ROS_INFO("value: 0x%02X\n", c);
		if (c == 0x0a) {
			// publish barcode input
			publish(k);
			k = 0;
		} else {
			cbuf[k++] = c;
		}		
		usleep(5000);
	} //while (ros::ok())

	return;
} 

void BarCodeNode::publish(int size)
{
	std::string s;
	s.assign(cbuf,size);
	barcode_pub.publish(s);
	return;
}



