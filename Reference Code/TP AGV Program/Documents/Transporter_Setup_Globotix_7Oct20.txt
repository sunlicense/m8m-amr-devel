************ Setup of GigaByte for Transporter  ************

1. Use USB Thumb Driver to install Ubuntu 16.04
   a. Insert USB driver and Re-Boot CPU.
   b. Press ESC/F10/F12 key to boot from USB driver
   c. Install Third Party drivers 
   d. Set to auto Login
2. Update Ubuntu to the latest version (4.15.0-46 kernel)
3. Install KolourPaint, GIMP Image Editor
4. Install ROS (melodic)
	 a. Go to ROS website and install melodic. 
   b. sudo apt-get install ros-melodic-desktop-full
   c. sudo apt-get install ros-melodic-navigation
   d. sudo apt-get install ros-melodic-vision-opencv (no need)
   e. sudo apt-get install ros-melodic-image-transport (no need)
   f. sudo apt-get install ros-melodic-joint-state-publisher (no need)
   g. sudo apt-get install ros-melodic-laser-filters (no need)
   h. sudo apt-get install lighttpd
   i. sudo apt-get install ros-melodic-rosbridge-suite
   j. sudo apt-get install ros-melodic-joy
   k. sudo apt-get install ros-melodic-robot-pose-publisher (download source (.cpp) and compile)
   l. sudo apt-get install ros-melodic-rosserial-python
   m. sudo apt-get install ros-melodic-rosserial-server
   n. sudo apt-get install libgsl-dev  // gsl
   o. sudo apt-get install ros-melodic-csm
	 p. sudo apt-get install ros-melodic-sick-scan (compile from source)
	 q. sudo apt-get install ros-melodic-sick-tim (compile from source)
   r. sudo apt-get install gamin  //solve lighttpd problem ()
   s. sudo apt-get install ros-melodic-self-test // needed to compile hokuyo node (no need)
	 t. sudo apt-get install ros-melodic-slam-gmapping
	 u. sudo apt-get install ros-melodic-ira-laser-tools (no need)
   v. sudo apt install sshpass (to send file to remote pc)
	 w. sudo apt-get install ros-melodic-usb-cam
	 x. sudo apt-get install ros-melodic-web-video-server
	 y. sudo apt-get install ros-melodic-pointcloud-to-laserscan
	 z. sudo apt-get install ros-melodic-robot-pose-ekf
	 1. sudo apt-get install chrony on all machines
			sudo gedit /etc/chrony/chrony.conf on all machines other than rac0 (master)
      add : server rac0 minpoll 0 maxpoll 5 maxdelay .05 (rac0 is the master)
      This will synchronise time across all machines.
	 2. sudo apt-get install ros-melodic-libuvc-camera
			Remember to setup udev rules for camera *see below*
   3. sudo apt install net-tools
   4. sudo apt-get install ros-melodic-ddynamic-reconfigure

	
4a. Installing drivers for robosense 
	1. go to https://github.com/RoboSense-LiDAR/ros_rslidar
	2. install : sudo apt-get install -y libpcap-dev
	3. Copy the whole rslidar ROS driver directory into ROS workspace, i.e "~/catkin_ws/src".
	4. cd ~/catkin_ws/src/ros_rslidar/rslidar_driver
	5. chmod 777 cfg/*
	6. cd ~/catkin_ws/src/ros_rslidar/rslidar_pointcloud
	7. chmod 777 cfg/*
	8. cd ~/catkin_ws
	9. catkin_make
	10. By default, the RSLIDAR is configured to 192.168.1.200 as its device IP and 192.168.1.102 as PC IP that it would communicate. 
			The default MSOP port is 6699 while DIFOP port is 7788. So you need 			
			configure your PC IP as a static one 192.168.1.102.
	11. Run as independent node :
			We have provide example launch files under rslidar_pointcloud/launch, we can run the launch file to view the point cloud data. 
			For example, if we want to view RS-LiDAR-16 real time data: (1). Open a new terminal and run:

			cd ~/catkin_ws
			source devel/setup.bash
			roslaunch rslidar_pointcloud rs_lidar_16.launch
      run rviz :
			Set the Fixed Frame to "rslidar". Add a Pointcloud2 type and set the topic to "rslidar_points".
	12. Run as nodelet :
			We can also run the driver node and cloud node as a nodelet. Open a new terminal and run:

			cd ~/catkin_ws
			source devel/setup.bash
			roslaunch rslidar_pointcloud cloud_nodelet.launch. Run rviz to view
	13. About the lidar calibration parameters
			Under "rslidar_pointcloud/data" directory, you can find the lidar calibration parameters files for the exact sensor. 
			By default the launch file "rs_lidar_16.launch" load the three files:

	    rslidar_pointcloud/data/rs_lidar_16/angle.csv
	    rslidar_pointcloud/data/rs_lidar_16/ChannelNum.csv
 		  rslidar_pointcloud/data/rs_lidar_16/curves.csv.

4b. Install realsense ros
	1. Go to https://github.com/IntelRealSense/realsense-ros and follow instruction
	2. Build from sources by downloading the latest Intel® RealSense™ SDK 2.0 and follow the instructions under Linux Installation
	3. Download : librealsense-2.31.0.zip
	4. Update Ubuntu distribution, including getting the latest stable kernel:
     sudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade
	5. Install the core packages required to build librealsense binaries and the affected kernel modules:
     sudo apt-get install git libssl-dev libusb-1.0-0-dev pkg-config libgtk-3-dev
	6. sudo apt-get install libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev
	7. Run Intel Realsense permissions script located from librealsense root directory:
     ./scripts/setup_udev_rules.sh
 	8. ./scripts/patch-realsense-ubuntu-lts.sh
	9. Navigate to librealsense root directory and run mkdir build && cd build
	10. cmake ../ -DCMAKE_BUILD_TYPE=Release 
	11. sudo make uninstall && make clean && make && sudo make install
	12. Clone the latest Intel® RealSense™ ROS from here into 'catkin_ws/src/'
	13. sudo apt-get install ros-melodic-ddynamic-reconfigure
	14. cd ~/catkin_ws/
	15. catkin_make -DCATKIN_ENABLE_TESTING=False -DCMAKE_BUILD_TYPE=Release
	16. catkin_make install
	17. roslaunch realsense2_camera rs_camera.launch
	18. sudo apt install sshpass (to send file to remote pc)
	26. sudo apt install openssh-server
	27. sudo apt-get install xdotool  // to start firefox fullscreen
	19. echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
	20.	source ~/.bashrc
	21. sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential
	22. sudo apt install python-rosdep
	23. sudo rosdep init
	24. rosdep update
	25. sudo apt update

4c. Install Laserscan_Kinect
	1. copy directory laserscan_kinect to catkin_ws/src/
	2. catkin_make
	3. setup parameters to convert realsense image to laserscan

5. Configure lighttpd
   a. sudo gedit /etc/lighttpd/lighttpd.conf
      i. server.document-root = "/home/rac/www2"
      ii. server.username = "rac"
      iii. server.groupname = "rac"
      iv. server.port = 80
   b. sudo chown -R rac:rac /var/log/lighttpd/
   c. sudo /etc/init.d/lighttpd start
   d. sudo /etc/init.d/lighttpd stop
   e. sudo /etc/init.d/lighttpd restart
   f. copy www directory over and test lighttpd
6. Creating a ROS workspace
   a. mkdir -p ~/catkin_ws/src
   b. cd ~/catkin_ws/src
   c. catkin_init_workspace
   d. cd ~/catkin_ws/
   e. catkin_make
7. Compile hokuyo_node
   a. Download the latest driver_common and copy to catkin_ws/src and catkin_make
   b. Download the latest hokuyo_node and copy to catkin_ws/src and catkin_make
8. Copy htbot directory to catkin_ws/src and catkin_make
9. Setup /etc/udev/rules.d rules for uno,joy,hokuyo lasers,epos2 and rfid
10. Setup auto launch file
11. Setup Alfa Awus036ach adaptor
   a. sudo apt-get install build-essential git
   b. git clone https://github.com/aircrack-ng/rtl8812au
   c. cd rtl8812au
   d. make
   e. sudo make install
   f. reboot
   g. if you have any other drivers installed,remove them first :
      i. cd /usr/src. Look for directory that has rtl8812au name
      ii. sudo rm -r rtl8812AU-4.3.22/  (example)
      iii. Or you can also go to the directory of the driver which was make and sudo make install
           Then type sudo make uninstall
      iv. Or sudo dkms remove rtl9912au/4.3.8.12175.20140902+dfsg --all to remove driver installed using dkms
12. Tune Transporter
   a. move straight for 2m and adjust WCC
   b. rotate 180 degree and adjust WBC
   c. Tune Main Laser and adjust distance from baselink. Also adjust obsdist
   d. Tune side lasers 
13. Test Navigation
14. Test Docking and UnDocking
15. Test Functional Specification
16. Auto execution of sudo
   a. sudo visudo
   b. at the last line, add ssmc ALL=(ALL) NOPASSWD:ALL
   c. ssmc is the user
17. Copy .rviz files to system.
18. Autologin for XU4
	a. sudo pluma /usr/share/lightdm/lightdm.conf.d/60-lightdm-gtk-greeter.conf
	b. add (autologin-user=odroid) to end of file
19. USB Sound Card for XU4
	a. sudo apt-get install pavucontrol
	b. run pavucontrol to disable odroid sound and enable usb sound card

******** Udev **********
$ lsusb:

Bus 001 Device 023: ID 0403:6001 Future Technology Devices International, Ltd FT232 USB-Serial (UART) IC

Where 0403 is the vendorID, and 6001 the productID.

As above, I added the user to dialout and tty: 
$ sudo usermod -aG dialout $USER
$ sudo usermod -aG tty $USER

But, the line in /etc/udev/rules.d/99-libftdi.rules, is different:

ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="0403", ATTRS={idProduct}=="6001", OWNER="user", MODE="0777", GROUP="dialout"

It could be that the crucial difference is SUBSYSTEM=="usb".

********** Running ROS across Multiple machines ******************

1. set /etc/hosts
   example : 
  	10.42.0.1	odroid
		127.0.0.1	localhost
		10.42.0.1	xu4
		10.42.0.131	giga
		
2. make sure you can ping all machines in the network
3. create an environment script file 
		#!/bin/bash -e
		source ~/catkin_ws/devel/setup.bash
		export ROS_MASTER_URI=http://xu4:11311
		export ROS_HOSTNAME=10.42.0.1  
		export ROS_IP=10.42.0.1  
		export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:/home/odroid
		export ROSLAUNCH_SSH_UNKNOWN=1
		roslaunch htbot real.launch &
		exec "$@"
4. Fro roslaunch to work across multiple machines, need to do the following
	a. rename ~/.ssh/known_hosts to ~/.ssh/known_hosts_org
		mv ~/.ssh/known_hosts ~/.ssh/known_hosts_org
	b. sudo rm ~/.ssh/known_hosts  // remove known_hosts file
	c. ssh -oHostKeyAlgorithms='ssh-rsa' xu4   // xu4 is the hostname
	d. ssh -oHostKeyAlgorithms='ssh-rsa' giga  // giga is the hostname
	e. do c & d for both machines
5. Create the following launch files
	<!-- -*- mode: XML -*- -->
	<launch>
		<machine name="c1" address="10.42.0.1" env-loader="/home/odroid/xu4_setup.sh" timeout="20" user="odroid" password="odroid"/>
		<machine name="c2" address="10.42.0.131" env-loader="/home/rac/setup_rac.sh" timeout="20" user="rac" password="rac" />
  	<node name="listener" pkg="rospy_tutorials" type="listener.py" output="screen" machine="c1" ></node>	
  	<node name="talker" pkg="rospy_tutorials" type="talker.py" output="screen" machine="c2" ></node>
	</launch>
6. Test on both machines

7. example of script file to do multiCPU. 
	Script for rac as Master
   	#!/bin/bash -e
		source ~/catkin_ws/devel/setup.bash
		export ROS_MASTER_URI=http://giga:11311
		export ROS_HOSTNAME=10.42.0.10
		export ROS_IP=10.42.0.10
		export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:/home/rac
		export ROSLAUNCH_SSH_UNKNOWN=1
		exec "$@"
	Script for rac as slave
		#!/bin/bash -e
		source ~/catkin_ws/devel/setup.bash
		export ROS_MASTER_URI=http://xu4:11311
		export ROS_HOSTNAME=10.42.0.10
		export ROS_IP=10.42.0.10
		export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:/home/rac
		export ROSLAUNCH_SSH_UNKNOWN=1
		exec "$@"

8. Installing openssh master and client
		sudo apt-get install openssh-server
		Enable the ssh service by typing sudo systemctl enable ssh
		Start the ssh service by typing sudo systemctl start ssh
		sudo apt-get install openssh-client

************** Solve ext4-fs (mmcblk0p2) re-mounted. opts errors=remount-ro odroid *******************************
# setenv bootrootfs "console=tty1 console=ttySAC2,115200n8 root=UUID=e139ce78-9841-40fe-8823-96a304a09859 rootwait ro fsck.repair=yes net.ifnames=0"
setenv bootrootfs "console=tty1 console=ttySAC2,115200n8 root=/dev/mmcblk0p2 rootwait rw fsck.repair=yes net.ifnames=0"

************ copy files using sshpass *************
1. install sshpass
   sudo apt install sshpass
2. command to send file to remote pc
	 sshpass -p 'password' scp file.tar.gz root@xxx.xxx.xxx.194:/backup 
   example : sshpass -p 'odroid' scp map.txt odroid@10.42.0.142:/home/odroid/

*********** Launch Firefox in fullscreen ***************
firefox -new-window -url http://192.168.1.120/index.html &
xdotool search --sync --onlyvisible --class "Firefox" windowactivate key F11 &

**************** Installing realsense SDK *********************
1. sudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade
2. Download and unzip the latest stable version from master branch: https://github.com/IntelRealSense/librealsense/archive/master.zip (file is librealsense-2.33.1.zip)
3. Navigate to librealsense root directory to run the following scripts. Unplug any connected Intel RealSense camera.
4. Install the core packages required to build librealsense binaries and the affected kernel modules:
		sudo apt-get install git libssl-dev libusb-1.0-0-dev pkg-config libgtk-3-dev
5. For ubuntu 16 : sudo apt-get install libglfw3-dev
6. Run Intel Realsense permissions script from librealsense root directory:
    ./scripts/setup_udev_rules.sh
7. Build and apply patched kernel modules for: Ubuntu 14/16/18 with LTS kernel :
		./scripts/patch-realsense-ubuntu-lts.sh
8. Building librealsense2 SDK : Navigate to librealsense root directory and run :
		mkdir build && cd build
9. Run CMake : 
    cmake ../ -DCMAKE_BUILD_TYPE=Release
10. Recompile and install librealsense binaries:
     sudo make uninstall && make clean && make && sudo make install
11. The shared object will be installed in /usr/local/lib, header files in /usr/local/include.
		The binary demos, tutorials and test files will be copied into /usr/local/bin

************* Install Intel® RealSense™ ROS from Sources **************
1. Clone the latest Intel® RealSense™ ROS from here into 'catkin_ws/src/'  (realsense-ros-2.2.13)
2. sudo apt-get install ros-melodic-ddynamic-reconfigure
3. cd ~/catkin_ws/
4. catkin_make clean
5. catkin_make -DCATKIN_ENABLE_TESTING=False -DCMAKE_BUILD_TYPE=Release
6. catkin_make install
7. echo "source ~/catkin_ws/devel/setup.bash" >> ~/.bashrc
8. source ~/.bashrc

************* Configuring Chrony *****************
For Master :
Add the following into /etc/chrony/chrony.conf
	local stratum 8
	manual
	allow 192.168.100
	smoothtime 400 0.01

For All Slaves :
Add the following into /etc/chrony/chrony.conf
	server 192.168.1.100 iburst
	server 192.168.1.100 minpoll 0 maxpoll 5 maxdelay 0.1

******************* libuvc-camera **********************************
1. used in Globotix for Arduino camera
2. Need to setup the following udev rules.
3. SUBSYSTEMS=="usb", ENV{DEVTYPE}=="usb_device", ATTRS{idVendor}=="0c45", ATTRS{idProduct}=="6366", MODE="0666"
   where 0x0c45 is the vendor code and 0x6366 is the product code/

********************* Dynamic Re-Configure ***************************

rosrun dynamic_reconfigure dynparam set /move_base planner_frequency 16.0
rosrun dynamic_reconfigure dynparam set /move_base planner_patience 10.0
rosrun dynamic_reconfigure dynparam set /move_base controller_frequency 16.0
rosrun dynamic_reconfigure dynparam set /move_base controller_patience 16.0

rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS sim_time 3.5
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS path_distance_bias 0.5
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS goal_distance_bias 4.0
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS max_vel_theta 1.60
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS vtheta_samples 11
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS max_vel_x 1.3
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS min_vel_x 0.06
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS acc_lim_x 0.03
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS acc_lim_y 0.03
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS acc_lim_theta 0.03
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS max_vel_theta 1.5
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS min_vel_theta -1.5
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS min_in_place_vel_theta 0.1
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS vx_samples 15
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS vtheta_samples 15
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS heading_lookahead 0.35
rosrun dynamic_reconfigure dynparam set /move_base/TrajectoryPlannerROS escape_vel -0.03

rosrun dynamic_reconfigure dynparam set /move_base/global_costmap update_frequency 11.0
rosrun dynamic_reconfigure dynparam set /move_base/global_costmap publish_frequency 4.0
rosrun dynamic_reconfigure dynparam set /move_base/global_costmap width 20 (integer)
rosrun dynamic_reconfigure dynparam set /move_base/global_costmap robot_radius 0.5
rosrun dynamic_reconfigure dynparam set /move_base/global_costmap footprint_padding 0.05

rosrun dynamic_reconfigure dynparam set /move_base/local_costmap update_frequency 11.0
rosrun dynamic_reconfigure dynparam set /move_base/local_costmap publish_frequency 4.0
rosrun dynamic_reconfigure dynparam set /move_base/local_costmap width 20 (integer)
rosrun dynamic_reconfigure dynparam set /move_base/local_costmap robot_radius 0.5
rosrun dynamic_reconfigure dynparam set /move_base/locall_costmap footprint_padding 0.05

rosrun dynamic_reconfigure dynparam set /amcl max_particles 20000
rosrun dynamic_reconfigure dynparam set /amcl min_particles 1000

******************** Setup SQLite3 ****************************************
1. sudo apt-get install sqlite3 libsqlite3-dev
2. sudo apt-get install sqlitebrowser
3. To compile sql codes in ROS
   a. Go to SQLite3 download web page. 
	 b. Download : sqlite-amalgamation-3330000.zip (2.31 MiB). Single cpp file for sqlite
   c. cd to directory the zip file is extracted eg. ~/Download/sqlite-amalgamation-3330000
   d. run gcc shell.c sqlite3.c -lpthread -ldl
   e. sudo mkdir /opt/sqlite3
   f. sudo cp ./a.out /opt/sqlite3/sqlite3.out  (a.out is the shared library generated by (d)
   g. add : FIND_LIBRARY(sqlite3_LIBRARIES sqlite3 /opt/sqlite3) to CmakeLists.txt
	 h. add_executable(sql src/sql_node.cpp)
 		  target_link_libraries ( sql ${sqlite3_LIBRARIES} ${OpenCV_LIBRARIES} ${catkin_LIBRARIES})
	    add_dependencies(sql htbot_generate_messages_cpp)

********************  Creating Better Maps *************************************************
n the book Programming Robots with ROS (pg 146), it is suggested to try playing with the following params first:

/slam_gmapping/agularUpdate to 0.1
/slam_gmapping/linearUpdate to 0.1
/slam_gmapping/lskip to 10
/slam_gmapping/xmax to 10
/slam_gmapping/xmin to -10
/slam_gmapping/ymax to 10
/slam_gmapping/ymin to -10

********** Example from one user *******************
I use a SICK laser scanner and use the default params for gmapping with very good results. I get the best results, however, 
when I drive around and turn slowly. It can take quite some time (> 45 minutes) to map a large space (> 2000 sq ft) 
with lots of pathways.

Now, slowly can mean different things for different people (or robots), but roughly it takes a few minutes / 100 sq ft. 
It also helps to go over problem areas a couple of times.

You may find that the first time you went over an area it doesn't look that great but after the second time it gets 
adjusted and looks better.

As for finding the right parameters for your robot, this can be more of an art than a science at times. 
However, if you record your laser scans in a bag file then run gmapping you'll be able to properly tune your system much more 
systematically and efficiently (by changing the params on the same data until you get optimal results).

**************** ROS Cartographer ******************************************
cartographer_pbstream_to_ros_map is used to generate .pgm and yaml

cartographer_rosbag_validate -bag_filename your_bag.bag (to validate bag file)

catkin_make_isolated --install --use-ninja 

-------------------- 3D Laser Problem --------------------------------

sudo cp -av --preserve=links ~/Documents/libvtkproj4-6.2.so* /usr/lib/x86_64-linux-gnu/






